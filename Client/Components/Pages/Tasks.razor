@page "/tasks"
@inject ITasksService TaskService
@inject NavigationManager Navigation
@using TaskFlow.Shared.Models
@using TaskFlow.Client.Services

<h3>Tasks</h3>

@if (tasks == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Title</th>
                <th>Description</th>
                <th>Priority</th>
                <th>Due Date</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var task in tasks)
            {
                <tr>
                    <td>@task.Title</td>
                    <td>@task.Description</td>
                    <td>@task.Priority</td>
                    <td>@(task.DueDate?.ToString("d"))</td>
                    <td>
                        <a href="tasks/@task.Id">View</a> | 
                        <a href="tasks/edit/@task.Id">Edit</a> | 
                        <button @onclick="() => DeleteTask(task.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <button @onclick="AddNewTask">Add New Task</button>
}

@code {
    private IEnumerable<TaskFlow.Shared.Models.Tasks>? tasks;

    protected override async Task OnInitializedAsync()
    {
        await LoadTasks();
    }

    private async Task LoadTasks()
    {
        tasks = await TaskService.GetAllTasksAsync();
    }

    private async Task DeleteTask(long id)
    {
        if (await TaskService.DeleteTaskAsync(id))
        {
            await LoadTasks();
        }
    }

    private void AddNewTask()
    {
        Navigation.NavigateTo("tasks/add");
    }
}